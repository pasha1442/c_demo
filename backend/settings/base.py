"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
from decouple import config

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    'daphne',
    'jazzmin',
    'debug_toolbar',
    'rangefilter',
    'import_export',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'company',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'defender',
    # 'rest_framework_simplejwt.token_blacklist',
    'basics',
    'auth',
    'chat',
    'dash',
    'history',
    'services',
    'systemsetting',
    'metering',
    'api_controller',
    'channels',
    "notifications",
    "data_processing",     # HEALTH CHECK APPS
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.contrib.redis',

    'health_check.storage',
    'health_check.contrib.migrations',
    'health_check.contrib.celery',
    'health_check.contrib.celery_ping',
    # 'health_check.contrib.psutil',
    # 'health_check.contrib.s3boto3_storage',
    "django_google_sso",
    "insights",


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.common.CommonMiddleware',
    'defender.middleware.FailedLoginMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'company.middleware.CompanySessionMiddleware',
    'backend.middlewares.JWTAuthenticationMiddleware',
    'backend.middlewares.PostAuthenticationMiddleware'
    # 'dash.middleware.ValidateTokenMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:8080').split('|')
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1').split('|')
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='127.0.0.1').split('|')

INTERNAL_IPS = [
    'localhost',
    '127.0.0.1',
]

DEBUG = config('DEBUG', default=False, cast=bool)
ENABLE_LANGFUSE_TRACING = config('ENABLE_LANGFUSE_TRACING', default=False, cast=bool)
LOG_FILES_ROOT = config('LOG_FILES_ROOT', default="logs")
FAILURE_QUEUE_LOG_FILES_ROOT = config('FAILURE_QUEUE_LOG_FILES_ROOT', default=LOG_FILES_ROOT)
SENTRY_DSN_URL = config('SENTRY_DSN_URL', default="")

ROOT_URLCONF = 'backend.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR / "backend", 'templates'), os.path.join(BASE_DIR / "chat", 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'company.context_processors.get_current_company_ref',
            ],
        },
    },
]

LANGFUSE_CURRENT_ENVIRONMENT = config("CURRENT_ENVIRONMENT")
# Redis Configuration
REDIS_HOST = config('REDIS_HOST', default="redis")

REDIS_USERNAME = config('REDIS_USERNAME', default="")
REDIS_PASSWORD = config('REDIS_PASSWORD', default="")
REDIS_PORT = config('REDIS_PORT', default="6379")

# REDIS_URL = f'redis://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/1' if REDIS_USERNAME and REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}/1'
REDIS_URL = f'redis://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}' if REDIS_USERNAME and REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}'
"""
Redis DB
- 1 for Default Cache Used for workflow cache
- 2 used by celery workflow
- 3 Dedicated DB for Celery
- 4 Dedicated DB for Defender
- 5 Workflow status

"""
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "LOCATION": f"{REDIS_URL}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "celery_workflow_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}/2",  # Redis DB 2
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "workflow_status_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}/5",  # Redis DB 5
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# Redis DB: 3
CELERY_BROKER_URL = f'redis://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/3' if REDIS_USERNAME and REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}/3'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'

# Defender Configurations Redis DB: 4
DEFENDER_LOGIN_FAILURE_LIMIT = 3  # Number of allowed failed attempts
DEFENDER_COOLOFF_TIME = 300  # Lockout duration in seconds
DEFENDER_LOCKOUT_URL = "/locked/"  # Redirect URL on lockout (optional)
DEFENDER_REDIS_URL = f'redis://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/4' if REDIS_USERNAME and REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}/4'

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": REDIS_URL,
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }

# WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv("DB_USER"),
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': os.getenv("DB_HOST"),
        'PORT': os.getenv("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT = '/var/www/html/ivr_backend/static/'
STATIC_ROOT = config('STATIC_ROOT_DIR', default="/var/www/html/ivr_backend/static/")

STATICFILES_DIRS = [
    BASE_DIR / "backend" / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# AUTH_USER_MODEL = 'company.CompanyUser'

AUTH_USER_MODEL = 'custom_auth.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
# AUTHENTICATION_BACKENDS = [
#     'auth.backends.ApiKeyBackend',
# ]
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

# Storage (Local or S3)
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"  #This file storage used for check local storge health
MEDIA_ROOT = config('MEDIA_ROOT_DIR', default="media")
MEDIA_URL = "/media/"

# Health Check Parameters
STORAGE_TEST_FILE_NAME = config('STORAGE_TEST_FILE_NAME', default="health_check_test_file.txt")

GOOGLE_SSO_CLIENT_ID = config('GOOGLE_SSO_CLIENT_ID', default="")
GOOGLE_SSO_PROJECT_ID = config('GOOGLE_SSO_PROJECT_ID', default="")
GOOGLE_SSO_CLIENT_SECRET = config('GOOGLE_SSO_CLIENT_SECRET', default="")
GOOGLE_SSO_CALLBACK_DOMAIN = config('GOOGLE_SSO_CALLBACK_DOMAIN', default="")

GOOGLE_SSO_ALLOWABLE_DOMAINS = ["aurigait.com", "cygnusalpha.one"]
GOOGLE_SSO_STAFF_LIST = ["*"]
